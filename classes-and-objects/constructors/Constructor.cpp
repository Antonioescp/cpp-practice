#include <iostream>

using namespace std;

class Bar
{
public:
    Bar()
    {
        cout << "Bar has been constructed" << endl;
    }

    Bar(const Bar& src)
    {
        cout << "Bar has been copied" << endl;
    }

    Bar& operator=(const Bar& src)
    {
        cout << "Bar has been assigned" << endl;
        return *this;
    }
};

// This class has no user-declared constructors which means a default-constructor and copy-constructor is created
// by the compiler, so it can be created with no parameters and also copied
class Foo
{
private:
    double m_value;

    // Will be default-constructed, copied-constructed and copy assigned when the parent object is
    Bar m_object;
public:

    // The default-constructor made by the compiler will default-construct member objects
    // watch out, it doesn't zero-initialize atomic/primitive types like double
    // you can either in class initialize or initialize in a constructor

    void SetValue(double value) { m_value = value; }
    double GetValue() const { return m_value; }
};

void FooTest()
{
    // Calls the default constructor
    Foo first;

    // Be careful, atomic/primitive types are not zero-initialized, you'll get a random value here
    cout << first.GetValue() << endl;

    // Calls the copy constructor, it doesn't call the assignment operator as
    // you may intuitively could think first
    // same as 
    // Foo second { first };
    Foo second = first;

    // Calls the default constructor
    Foo third;

    // Calls the assignment operator
    third = second;
}

// This class has a user-defined constructor so a default-constructor wont be created by the compiler
// only the copy-constructor will be created
class A
{
private:
    double m_value;
public:
    // constructor with one parameter
    A(double initialValue) : m_value { initialValue } { }
};

class B
{
private:
    // When an object with no default constructor is a member of another object, the default constructor for the
    // parent object is not created since the compiler doesn't know how to construct an "A" object
    A m_value;
public:
    // So we define a default constructor ourselves
    B() : m_value { 0.0 } { cout << "B constructor" << endl; }
};

void ATest()
{
    // cant do this since there is no default constructor
    // A first;
    A first { 0.1 };

    // Can do this since a default constructor was defined
    B second;

    // Copying is still generated by the compiler
    B third { second };

    // Copy assignment generated by the compiler
    B forth; // default-constructed
    forth = third; // calling the assign operator (operator=)
}

int main()
{
    FooTest();
    ATest();
}